# -*- coding: utf-8 -*-
"""train_model_deep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7j0X42hvPXf679E4Be1BrDw5-MfaaqQ
"""

import tensorflow as tf
import keras
from keras.optimizers import Adam
from keras.optimizers.schedules import ExponentialDecay
from keras.losses import SparseCategoricalCrossentropy
from keras.metrics import SparseCategoricalAccuracy
from sklearn.metrics import average_precision_score, f1_score, precision_score, recall_score, roc_auc_score
from keras.callbacks import TensorBoard, ModelCheckpoint
from make_dataset_deep import make_filepaths_labels, train_test_split_deep
from create_model_deep import create_model_CNNRNN_regularized


def train_model_deep(model, epoch, dataset_train, dataset_test):
    lr_schedule = ExponentialDecay(initial_learning_rate=1e-3,
                               decay_steps= 4000, decay_rate = 0.5, staircase=False, name=None)

    model.compile(optimizer = Adam(lr_schedule),
              loss = SparseCategoricalCrossentropy(from_logits = True),
              metrics = [ SparseCategoricalAccuracy()])

    logdir = 'tb_logs/model'
    tensorboard_callback = TensorBoard(log_dir=logdir)

    checkpoint_filepath = 'model_checkpoint/model'
    model_checkpoint_callback = ModelCheckpoint(
      filepath=checkpoint_filepath,
      save_weights_only=False,
      monitor='val_sparse_categorical_accuracy',
      mode='max',
      save_best_only=True)

    training = model.fit(dataset_train, validation_data = dataset_test, epochs=epoch,
                    callbacks=[tensorboard_callback,model_checkpoint_callback])

    return model

def main():
    features = ['LinearSpectrogram', 'MelSpectrogram', 'MFCC']
    metadata_path = '/content/drive/MyDrive/archive (17)/bird_songs_metadata.csv'
    audio_path = '/content/drive/MyDrive/archive (17)/wavfiles/'
    file_paths, labels = make_filepaths_labels(metadata_path, audio_path)
    dataset_train, dataset_test = train_test_split_deep(file_paths, labels, features[1])
    model = create_model_CNNRNN_regularized()
    print(model.summary())
    model_eval = train_model_deep(model, 60, dataset_train, dataset_test)
    print(model_eval.evaluate(dataset_test, return_dict=True))


if __name__ == "__main__":
    main()