# -*- coding: utf-8 -*-
"""create_model_deep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wlJTzQ7yq02Buqms4_JYfvthN5R03t4y
"""

import tensorflow as tf
import keras
from keras import Model, Input
from keras.layers import Input, Conv1D, SpatialDropout1D, GlobalAveragePooling1D, Dense, Dropout, Bidirectional, GRU, Attention, Activation, Dot, concatenate
from keras.models import Model
from keras.layers import Conv1D, Flatten, Dense, Dropout, SpatialDropout1D, GlobalAveragePooling1D
from tensorflow.keras.regularizers import l2


def create_model_CNN():
    inputs = Input((1026, 128), name = '0_Input_shape')

    x = Conv1D(64,8,2, activation='relu', padding='same', name = '1_Conv1D')(inputs)
    x = SpatialDropout1D(0.17, name = '2_SpatialDropout1D')(x)

    x = Conv1D(64,8,2, activation='relu', padding='same', name = '3_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '4_SpatialDropout1D')(x)

    x = Conv1D(64,8,2, activation='relu', padding='same', name = '5_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '6_SpatialDropout1D')(x)

    x = Conv1D(64,8,2, activation='relu', padding='same', name = '7_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '8_SpatialDropout1D')(x)

    x = GlobalAveragePooling1D(name = '9_Global_avg_pooling')(x)
    x = Dense(512, activation='relu', name='10_Dense')(x)
    x = Dropout(0.5, name='11_Dropout')(x)
    outputs = Dense(5, name='12_Dense')(x)
    model = Model(inputs=inputs, outputs=outputs, name = 'Bird_audio_classification_model')

    return model

def create_model_CNN_linear():
    inputs = Input((1026, 257), name = '0_Input_shape')

    x = Conv1D(128,8,2, activation='relu', padding='same', name = '1_Conv1D')(inputs)
    x = SpatialDropout1D(0.17, name = '2_SpatialDropout1D')(x)

    x = Conv1D(128,8,2, activation='relu', padding='same', name = '3_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '4_SpatialDropout1D')(x)

    x = Conv1D(128,8,2, activation='relu', padding='same', name = '5_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '6_SpatialDropout1D')(x)

    x = Conv1D(128,8,2, activation='relu', padding='same', name = '7_Conv1d')(x)
    x = SpatialDropout1D(0.17, name = '8_SpatialDropout1D')(x)

    x = GlobalAveragePooling1D(name = '9_Global_avg_pooling')(x)
    x = Dense(512, activation='relu', name='10_Dense')(x)
    x = Dropout(0.5, name='11_Dropout')(x)
    outputs = Dense(5, name='12_Dense')(x)
    model = Model(inputs=inputs, outputs=outputs, name = 'Bird_audio_classification_model')

    return model

def create_model_CNN_RNN():
    inputs = Input(shape=(1026, 128), name='0_Input_shape')

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='1_Conv1D')(inputs)
    x = SpatialDropout1D(0.17, name='2_SpatialDropout1D')(x)

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='3_Conv1d')(x)
    x = SpatialDropout1D(0.17, name='4_SpatialDropout1D')(x)

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='5_Conv1d')(x)
    x = SpatialDropout1D(0.17, name='6_SpatialDropout1D')(x)

    x = Bidirectional(GRU(64, return_sequences=True, name='GRU_1'), merge_mode='concat')(x)
    x = Attention()([x, x])

    x = GlobalAveragePooling1D(name='9_Global_avg_pooling')(x)
    x = Dense(512, activation='relu', name='10_Dense')(x)
    x = Dropout(0.5, name='11_Dropout')(x)

    outputs = Dense(5, name='12_Dense')(x)
    model = Model(inputs=inputs, outputs=outputs, name='Bird_audio_classification_model')

    return model

def create_model_CNNRNN_regularized():
    inputs = Input(shape=(1026, 128), name='0_Input_shape')

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='1_Conv1D')(inputs)
    x = SpatialDropout1D(0.17, name='2_SpatialDropout1D')(x)

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='3_Conv1d', kernel_regularizer=l2(0.01))(x)
    x = SpatialDropout1D(0.17, name='4_SpatialDropout1D')(x)

    x = Conv1D(64, 8, 2, activation='relu', padding='same', name='5_Conv1d')(x)
    x = SpatialDropout1D(0.17, name='6_SpatialDropout1D')(x)

    x = Bidirectional(GRU(64, return_sequences=True, name='GRU_1'), merge_mode='concat')(x)
    x = Attention()([x, x])

    x = GlobalAveragePooling1D(name='9_Global_avg_pooling')(x)
    x = Dense(512, activation='relu', name='10_Dense', kernel_regularizer=l2(0.01))(x)
    x = Dropout(0.5, name='11_Dropout')(x)

    outputs = Dense(5, name='12_Dense')(x)
    model = Model(inputs=inputs, outputs=outputs, name='Bird_audio_classification_model')

    return model

def main():
    model = create_model_CNNRNN_regularized()
    print(model.summary())

if __name__ == "__main__":
    main()