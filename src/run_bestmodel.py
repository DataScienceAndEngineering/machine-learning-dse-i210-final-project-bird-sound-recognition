# -*- coding: utf-8 -*-
"""Run_BestModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kSNCaw3Q_NvtfBOUpgURd4MYHYcfTFUH
"""

# All imports
import pandas as pd
import tensorflow as tf
from make_dataset_deep import make_filepaths_labels, train_test_split_deep # Importing the py file for creating the tensors with features
from create_model_deep import create_model_CNNRNN_regularized # Importing the function for creating the CNN+RNN model
from train_model_deep import train_model_deep # Importing the function for training the model
from predict_model_deep import model_load_predict # Importing the function to load and get model predictions
from visualisations_deep_models import print_evaluation_metrics, visualize_confusion_matrix, visualize_saliency_map # Importing the functions for evaluation

metadata_path = '/content/drive/MyDrive/Bird_Sounds/bird_songs_metadata.csv' # Please enter the path to the metadatafile
audio_path = '/content/drive/MyDrive/Bird_Sounds/wavfiles/' # Please enter the path to the wav files here
# Storing the filepaths and the corresponding labels in a list forming the X and y variables respectively.
file_paths, labels = make_filepaths_labels(metadata_path, audio_path)
# Creating the training and testing data using the MelSpectrogram as the features
dataset_train, dataset_test = train_test_split_deep(file_paths, labels, 'MelSpectrogram')

model = create_model_CNNRNN_regularized()

# Train the model
model_eval = train_model_deep(model, 120, dataset_train, dataset_test)
# Print the model's final loss and accuracy
print(model_eval.evaluate(dataset_test, return_dict=True))

model_path = '/model_checkpoint/model' # Please enter the path to the model here which got saved during the training
# Loading the trained model and getting the probabilities, predictions and the true labels
y_prob, y_pred, y_true = model_load_predict(model_path, dataset_test)
# Printing the evaluation metrics
print_evaluation_metrics(y_true, y_pred, y_prob)

# Visualising the confusion matrix
visualize_confusion_matrix(y_true, y_pred)

# Visualising the model interpretation
visualize_saliency_map(tf.keras.models.load_model(model_path), dataset_test, [15])